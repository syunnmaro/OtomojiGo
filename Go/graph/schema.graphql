directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Block implements Node {
  id: ID!
  authorID: String!
  speed: Float!
  speaker: String!
  volume: Float!
  pitch: Int!
  texts: String!
  duration: Int!
  partID: ID!
  part: Part!
}
"""
BlockWhereInput is used for filtering Block objects.
Input was generated by ent.
"""
input BlockWhereInput {
  not: BlockWhereInput
  and: [BlockWhereInput!]
  or: [BlockWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """author_id field predicates"""
  authorID: String
  authorIDNEQ: String
  authorIDIn: [String!]
  authorIDNotIn: [String!]
  authorIDGT: String
  authorIDGTE: String
  authorIDLT: String
  authorIDLTE: String
  authorIDContains: String
  authorIDHasPrefix: String
  authorIDHasSuffix: String
  authorIDEqualFold: String
  authorIDContainsFold: String
  """speed field predicates"""
  speed: Float
  speedNEQ: Float
  speedIn: [Float!]
  speedNotIn: [Float!]
  speedGT: Float
  speedGTE: Float
  speedLT: Float
  speedLTE: Float
  """speaker field predicates"""
  speaker: String
  speakerNEQ: String
  speakerIn: [String!]
  speakerNotIn: [String!]
  speakerGT: String
  speakerGTE: String
  speakerLT: String
  speakerLTE: String
  speakerContains: String
  speakerHasPrefix: String
  speakerHasSuffix: String
  speakerEqualFold: String
  speakerContainsFold: String
  """volume field predicates"""
  volume: Float
  volumeNEQ: Float
  volumeIn: [Float!]
  volumeNotIn: [Float!]
  volumeGT: Float
  volumeGTE: Float
  volumeLT: Float
  volumeLTE: Float
  """pitch field predicates"""
  pitch: Int
  pitchNEQ: Int
  pitchIn: [Int!]
  pitchNotIn: [Int!]
  pitchGT: Int
  pitchGTE: Int
  pitchLT: Int
  pitchLTE: Int
  """texts field predicates"""
  texts: String
  textsNEQ: String
  textsIn: [String!]
  textsNotIn: [String!]
  textsGT: String
  textsGTE: String
  textsLT: String
  textsLTE: String
  textsContains: String
  textsHasPrefix: String
  textsHasSuffix: String
  textsEqualFold: String
  textsContainsFold: String
  """duration field predicates"""
  duration: Int
  durationNEQ: Int
  durationIn: [Int!]
  durationNotIn: [Int!]
  durationGT: Int
  durationGTE: Int
  durationLT: Int
  durationLTE: Int
  """part_id field predicates"""
  partID: ID
  partIDNEQ: ID
  partIDIn: [ID!]
  partIDNotIn: [ID!]
  partIDGT: ID
  partIDGTE: ID
  partIDLT: ID
  partIDLTE: ID
  partIDContains: ID
  partIDHasPrefix: ID
  partIDHasSuffix: ID
  partIDEqualFold: ID
  partIDContainsFold: ID
  """part edge predicates"""
  hasPart: Boolean
  hasPartWith: [PartWhereInput!]
}
"""
CreateBlockInput is used for create Block object.
Input was generated by ent.
"""
input CreateBlockInput {
  authorID: String
  speed: Float
  speaker: String
  volume: Float
  pitch: Int
  texts: String
  duration: Int
  partID: ID!
}
"""
CreatePartInput is used for create Part object.
Input was generated by ent.
"""
input CreatePartInput {
  name: String!
  authorID: String!
  workID: ID!
  blockIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  googleID: String!
  stripeID: String
  point: Int
  workIDs: [ID!]
}
"""
CreateWorkInput is used for create Work object.
Input was generated by ent.
"""
input CreateWorkInput {
  name: String!
  createdAt: Time!
  authorID: ID!
  partIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "graphql-test-api/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Part implements Node {
  id: ID!
  name: String!
  workID: ID!
  authorID: String!
  work: Work!
  blocks: [Block!]
}
"""
PartWhereInput is used for filtering Part objects.
Input was generated by ent.
"""
input PartWhereInput {
  not: PartWhereInput
  and: [PartWhereInput!]
  or: [PartWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """work_id field predicates"""
  workID: ID
  workIDNEQ: ID
  workIDIn: [ID!]
  workIDNotIn: [ID!]
  workIDGT: ID
  workIDGTE: ID
  workIDLT: ID
  workIDLTE: ID
  workIDContains: ID
  workIDHasPrefix: ID
  workIDHasSuffix: ID
  workIDEqualFold: ID
  workIDContainsFold: ID
  """author_id field predicates"""
  authorID: String
  authorIDNEQ: String
  authorIDIn: [String!]
  authorIDNotIn: [String!]
  authorIDGT: String
  authorIDGTE: String
  authorIDLT: String
  authorIDLTE: String
  authorIDContains: String
  authorIDHasPrefix: String
  authorIDHasSuffix: String
  authorIDEqualFold: String
  authorIDContainsFold: String
  """work edge predicates"""
  hasWork: Boolean
  hasWorkWith: [WorkWhereInput!]
  """blocks edge predicates"""
  hasBlocks: Boolean
  hasBlocksWith: [BlockWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  blocks: [Block!]!
  parts: [Part!]!
  users: [User!]!
  works: [Work!]!
}
"""The builtin Time type"""
scalar Time
"""
UpdateBlockInput is used for update Block object.
Input was generated by ent.
"""
input UpdateBlockInput {
  authorID: String
  speed: Float
  speaker: String
  volume: Float
  pitch: Int
  texts: String
  duration: Int
  partID: ID
}
"""
UpdatePartInput is used for update Part object.
Input was generated by ent.
"""
input UpdatePartInput {
  name: String
  authorID: String
  workID: ID
  addBlockIDs: [ID!]
  removeBlockIDs: [ID!]
  clearBlocks: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  googleID: String
  stripeID: String
  point: Int
  addWorkIDs: [ID!]
  removeWorkIDs: [ID!]
  clearWorks: Boolean
}
"""
UpdateWorkInput is used for update Work object.
Input was generated by ent.
"""
input UpdateWorkInput {
  name: String
  createdAt: Time
  authorID: ID
  addPartIDs: [ID!]
  removePartIDs: [ID!]
  clearParts: Boolean
}
type User implements Node {
  id: ID!
  googleID: String!
  stripeID: String!
  point: Int!
  works: [Work!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """google_id field predicates"""
  googleID: String
  googleIDNEQ: String
  googleIDIn: [String!]
  googleIDNotIn: [String!]
  googleIDGT: String
  googleIDGTE: String
  googleIDLT: String
  googleIDLTE: String
  googleIDContains: String
  googleIDHasPrefix: String
  googleIDHasSuffix: String
  googleIDEqualFold: String
  googleIDContainsFold: String
  """stripe_id field predicates"""
  stripeID: String
  stripeIDNEQ: String
  stripeIDIn: [String!]
  stripeIDNotIn: [String!]
  stripeIDGT: String
  stripeIDGTE: String
  stripeIDLT: String
  stripeIDLTE: String
  stripeIDContains: String
  stripeIDHasPrefix: String
  stripeIDHasSuffix: String
  stripeIDEqualFold: String
  stripeIDContainsFold: String
  """point field predicates"""
  point: Int
  pointNEQ: Int
  pointIn: [Int!]
  pointNotIn: [Int!]
  pointGT: Int
  pointGTE: Int
  pointLT: Int
  pointLTE: Int
  """works edge predicates"""
  hasWorks: Boolean
  hasWorksWith: [WorkWhereInput!]
}
type Work implements Node {
  id: ID!
  name: String!
  createdAt: Time!
  authorID: ID!
  author: User!
  parts: [Part!]
}
"""
WorkWhereInput is used for filtering Work objects.
Input was generated by ent.
"""
input WorkWhereInput {
  not: WorkWhereInput
  and: [WorkWhereInput!]
  or: [WorkWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """author_id field predicates"""
  authorID: ID
  authorIDNEQ: ID
  authorIDIn: [ID!]
  authorIDNotIn: [ID!]
  authorIDGT: ID
  authorIDGTE: ID
  authorIDLT: ID
  authorIDLTE: ID
  authorIDContains: ID
  authorIDHasPrefix: ID
  authorIDHasSuffix: ID
  authorIDEqualFold: ID
  authorIDContainsFold: ID
  """author edge predicates"""
  hasAuthor: Boolean
  hasAuthorWith: [UserWhereInput!]
  """parts edge predicates"""
  hasParts: Boolean
  hasPartsWith: [PartWhereInput!]
}
