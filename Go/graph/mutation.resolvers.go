package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"graphql-test-api/ent"
	"graphql-test-api/graph/generated"
	"time"

	ulid "github.com/oklog/ulid/v2"
)

// CreateWork is the resolver for the createWork field.
func (r *mutationResolver) CreateWork(ctx context.Context) (*ent.Work, error) {
	return r.Client.Work.Create().
		SetName("新しい作品").
		SetID(ulid.Make().String()).
		SetCreatedAt(time.Now()).
		SetAuthorID("55081fd5-fb09-4c55-9423-8b234103cd5c").
		Save(ctx)
}

// CreatePart is the resolver for the createPart field.
func (r *mutationResolver) CreatePart(ctx context.Context, workID string) (*ent.Part, error) {
	return r.Client.Part.Create().
		SetID(ulid.Make().String()).
		SetName("新しいパート").
		SetWorkID(workID).
		SetAuthorID("55081fd5-fb09-4c55-9423-8b234103cd5c").
		Save(ctx)
}

// CreateBlock is the resolver for the createBlock field.
func (r *mutationResolver) CreateBlock(ctx context.Context, partID string) (*ent.Block, error) {
	return r.Client.Block.Create().
		SetID(ulid.Make().String()).
		SetAuthorID("55081fd5-fb09-4c55-9423-8b234103cd5c").
		SetSpeed(1).
		SetSpeaker("1").
		SetVolume(50).
		SetPitch(1).
		SetTexts("").
		SetDuration(0).
		SetPartID(partID).
		Save(ctx)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, googleID string) (*ent.User, error) {
	return r.Client.User.Create().
		SetID(ulid.Make().String()).
		SetGoogleID(googleID).
		SetPoint(0).
		SetStripeID("").
		Save(ctx)
}

// DeleteWork is the resolver for the deleteWork field.
func (r *mutationResolver) DeleteWork(ctx context.Context, workID string) (*bool, error) {
	// TODO delete処理を復元できるように紐づけを解除するだけにする FK制約があるので
	err := r.Client.Work.UpdateOneID(workID).SetAuthorID("INVALID").Exec(ctx)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

// DeletePart is the resolver for the deletePart field.
func (r *mutationResolver) DeletePart(ctx context.Context, partID string) (*bool, error) {
	err := r.Client.Part.DeleteOneID(partID).Exec(ctx)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

// DeleteBlock is the resolver for the deleteBlock field.
func (r *mutationResolver) DeleteBlock(ctx context.Context, blockID string) (*bool, error) {
	err := r.Client.Block.DeleteOneID(blockID).Exec(ctx)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

// UpdateWork is the resolver for the updateWork field.
func (r *mutationResolver) UpdateWork(ctx context.Context, workID string, name string) (*ent.Work, error) {
	return r.Client.Work.UpdateOneID(workID).SetName(name).Save(ctx)
}

// UpdatePart is the resolver for the updatePart field.
func (r *mutationResolver) UpdatePart(ctx context.Context, partID string, name string) (*ent.Part, error) {
	return r.Client.Part.UpdateOneID(partID).SetName(name).Save(ctx)
}

// UpdateBlock is the resolver for the updateBlock field.
func (r *mutationResolver) UpdateBlock(ctx context.Context, blockID string, speed *float64, speaker *string, volume *float64, duration *int, pitch *int, texts *string) (*ent.Block, error) {
	// Fetch the existing block by ID
	blockUpdateOne := r.Client.Block.UpdateOneID(blockID)

	// Update the block fields based on the provided parameters
	if speed != nil {
		blockUpdateOne = blockUpdateOne.SetSpeed(*speed)
	}

	if speaker != nil {
		blockUpdateOne = blockUpdateOne.SetSpeaker(*speaker)
	}

	if volume != nil {
		blockUpdateOne = blockUpdateOne.SetVolume(*volume)
	}

	if duration != nil {
		blockUpdateOne = blockUpdateOne.SetDuration(*duration)
	}

	if pitch != nil {
		blockUpdateOne = blockUpdateOne.SetPitch(*pitch)
	}

	if texts != nil {
		blockUpdateOne = blockUpdateOne.SetTexts(*texts)
	}

	// Save the updated block to the database
	updatedBlock, err := blockUpdateOne.Save(ctx)
	if err != nil {
		return nil, err
	}

	return updatedBlock, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
