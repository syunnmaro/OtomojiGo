// Code generated by ent, DO NOT EDIT.

package block

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the block type in the database.
	Label = "block"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAuthorID holds the string denoting the author_id field in the database.
	FieldAuthorID = "author_id"
	// FieldSpeed holds the string denoting the speed field in the database.
	FieldSpeed = "speed"
	// FieldSpeaker holds the string denoting the speaker field in the database.
	FieldSpeaker = "speaker"
	// FieldVolume holds the string denoting the volume field in the database.
	FieldVolume = "volume"
	// FieldPitch holds the string denoting the pitch field in the database.
	FieldPitch = "pitch"
	// FieldTexts holds the string denoting the texts field in the database.
	FieldTexts = "texts"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldPartID holds the string denoting the part_id field in the database.
	FieldPartID = "part_id"
	// EdgePart holds the string denoting the part edge name in mutations.
	EdgePart = "part"
	// Table holds the table name of the block in the database.
	Table = "blocks"
	// PartTable is the table that holds the part relation/edge.
	PartTable = "blocks"
	// PartInverseTable is the table name for the Part entity.
	// It exists in this package in order to avoid circular dependency with the "part" package.
	PartInverseTable = "parts"
	// PartColumn is the table column denoting the part relation/edge.
	PartColumn = "part_id"
)

// Columns holds all SQL columns for block fields.
var Columns = []string{
	FieldID,
	FieldAuthorID,
	FieldSpeed,
	FieldSpeaker,
	FieldVolume,
	FieldPitch,
	FieldTexts,
	FieldDuration,
	FieldPartID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Block queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAuthorID orders the results by the author_id field.
func ByAuthorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorID, opts...).ToFunc()
}

// BySpeed orders the results by the speed field.
func BySpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpeed, opts...).ToFunc()
}

// BySpeaker orders the results by the speaker field.
func BySpeaker(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpeaker, opts...).ToFunc()
}

// ByVolume orders the results by the volume field.
func ByVolume(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVolume, opts...).ToFunc()
}

// ByPitch orders the results by the pitch field.
func ByPitch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPitch, opts...).ToFunc()
}

// ByTexts orders the results by the texts field.
func ByTexts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTexts, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByPartID orders the results by the part_id field.
func ByPartID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPartID, opts...).ToFunc()
}

// ByPartField orders the results by part field.
func ByPartField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartStep(), sql.OrderByField(field, opts...))
	}
}
func newPartStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PartTable, PartColumn),
	)
}
