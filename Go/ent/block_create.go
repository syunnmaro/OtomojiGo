// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"graphql-test-api/ent/block"
	"graphql-test-api/ent/part"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockCreate is the builder for creating a Block entity.
type BlockCreate struct {
	config
	mutation *BlockMutation
	hooks    []Hook
}

// SetAuthorID sets the "author_id" field.
func (bc *BlockCreate) SetAuthorID(s string) *BlockCreate {
	bc.mutation.SetAuthorID(s)
	return bc
}

// SetSpeed sets the "speed" field.
func (bc *BlockCreate) SetSpeed(f float64) *BlockCreate {
	bc.mutation.SetSpeed(f)
	return bc
}

// SetSpeaker sets the "speaker" field.
func (bc *BlockCreate) SetSpeaker(s string) *BlockCreate {
	bc.mutation.SetSpeaker(s)
	return bc
}

// SetVolume sets the "volume" field.
func (bc *BlockCreate) SetVolume(f float64) *BlockCreate {
	bc.mutation.SetVolume(f)
	return bc
}

// SetPitch sets the "pitch" field.
func (bc *BlockCreate) SetPitch(i int) *BlockCreate {
	bc.mutation.SetPitch(i)
	return bc
}

// SetTexts sets the "texts" field.
func (bc *BlockCreate) SetTexts(s string) *BlockCreate {
	bc.mutation.SetTexts(s)
	return bc
}

// SetDuration sets the "duration" field.
func (bc *BlockCreate) SetDuration(i int) *BlockCreate {
	bc.mutation.SetDuration(i)
	return bc
}

// SetPartID sets the "part_id" field.
func (bc *BlockCreate) SetPartID(s string) *BlockCreate {
	bc.mutation.SetPartID(s)
	return bc
}

// SetID sets the "id" field.
func (bc *BlockCreate) SetID(s string) *BlockCreate {
	bc.mutation.SetID(s)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BlockCreate) SetNillableID(s *string) *BlockCreate {
	if s != nil {
		bc.SetID(*s)
	}
	return bc
}

// SetPart sets the "part" edge to the Part entity.
func (bc *BlockCreate) SetPart(p *Part) *BlockCreate {
	return bc.SetPartID(p.ID)
}

// Mutation returns the BlockMutation object of the builder.
func (bc *BlockCreate) Mutation() *BlockMutation {
	return bc.mutation
}

// Save creates the Block in the database.
func (bc *BlockCreate) Save(ctx context.Context) (*Block, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BlockCreate) SaveX(ctx context.Context) *Block {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BlockCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BlockCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BlockCreate) defaults() {
	if _, ok := bc.mutation.ID(); !ok {
		v := block.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BlockCreate) check() error {
	if _, ok := bc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author_id", err: errors.New(`ent: missing required field "Block.author_id"`)}
	}
	if _, ok := bc.mutation.Speed(); !ok {
		return &ValidationError{Name: "speed", err: errors.New(`ent: missing required field "Block.speed"`)}
	}
	if _, ok := bc.mutation.Speaker(); !ok {
		return &ValidationError{Name: "speaker", err: errors.New(`ent: missing required field "Block.speaker"`)}
	}
	if _, ok := bc.mutation.Volume(); !ok {
		return &ValidationError{Name: "volume", err: errors.New(`ent: missing required field "Block.volume"`)}
	}
	if _, ok := bc.mutation.Pitch(); !ok {
		return &ValidationError{Name: "pitch", err: errors.New(`ent: missing required field "Block.pitch"`)}
	}
	if _, ok := bc.mutation.Texts(); !ok {
		return &ValidationError{Name: "texts", err: errors.New(`ent: missing required field "Block.texts"`)}
	}
	if _, ok := bc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Block.duration"`)}
	}
	if _, ok := bc.mutation.PartID(); !ok {
		return &ValidationError{Name: "part_id", err: errors.New(`ent: missing required field "Block.part_id"`)}
	}
	if _, ok := bc.mutation.PartID(); !ok {
		return &ValidationError{Name: "part", err: errors.New(`ent: missing required edge "Block.part"`)}
	}
	return nil
}

func (bc *BlockCreate) sqlSave(ctx context.Context) (*Block, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Block.ID type: %T", _spec.ID.Value)
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BlockCreate) createSpec() (*Block, *sqlgraph.CreateSpec) {
	var (
		_node = &Block{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(block.Table, sqlgraph.NewFieldSpec(block.FieldID, field.TypeString))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.AuthorID(); ok {
		_spec.SetField(block.FieldAuthorID, field.TypeString, value)
		_node.AuthorID = value
	}
	if value, ok := bc.mutation.Speed(); ok {
		_spec.SetField(block.FieldSpeed, field.TypeFloat64, value)
		_node.Speed = value
	}
	if value, ok := bc.mutation.Speaker(); ok {
		_spec.SetField(block.FieldSpeaker, field.TypeString, value)
		_node.Speaker = value
	}
	if value, ok := bc.mutation.Volume(); ok {
		_spec.SetField(block.FieldVolume, field.TypeFloat64, value)
		_node.Volume = value
	}
	if value, ok := bc.mutation.Pitch(); ok {
		_spec.SetField(block.FieldPitch, field.TypeInt, value)
		_node.Pitch = value
	}
	if value, ok := bc.mutation.Texts(); ok {
		_spec.SetField(block.FieldTexts, field.TypeString, value)
		_node.Texts = value
	}
	if value, ok := bc.mutation.Duration(); ok {
		_spec.SetField(block.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if nodes := bc.mutation.PartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.PartTable,
			Columns: []string{block.PartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PartID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlockCreateBulk is the builder for creating many Block entities in bulk.
type BlockCreateBulk struct {
	config
	err      error
	builders []*BlockCreate
}

// Save creates the Block entities in the database.
func (bcb *BlockCreateBulk) Save(ctx context.Context) ([]*Block, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Block, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BlockCreateBulk) SaveX(ctx context.Context) []*Block {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BlockCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BlockCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
