// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"graphql-test-api/ent/block"
	"graphql-test-api/ent/part"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Block is the model entity for the Block schema.
type Block struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// AuthorID holds the value of the "author_id" field.
	AuthorID string `json:"author_id,omitempty"`
	// Speed holds the value of the "speed" field.
	Speed float64 `json:"speed,omitempty"`
	// Speaker holds the value of the "speaker" field.
	Speaker string `json:"speaker,omitempty"`
	// Volume holds the value of the "volume" field.
	Volume float64 `json:"volume,omitempty"`
	// Pitch holds the value of the "pitch" field.
	Pitch int `json:"pitch,omitempty"`
	// Texts holds the value of the "texts" field.
	Texts string `json:"texts,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// PartID holds the value of the "part_id" field.
	PartID string `json:"part_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockQuery when eager-loading is set.
	Edges        BlockEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BlockEdges holds the relations/edges for other nodes in the graph.
type BlockEdges struct {
	// Part holds the value of the part edge.
	Part *Part `json:"part,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// PartOrErr returns the Part value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockEdges) PartOrErr() (*Part, error) {
	if e.loadedTypes[0] {
		if e.Part == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: part.Label}
		}
		return e.Part, nil
	}
	return nil, &NotLoadedError{edge: "part"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Block) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case block.FieldSpeed, block.FieldVolume:
			values[i] = new(sql.NullFloat64)
		case block.FieldPitch, block.FieldDuration:
			values[i] = new(sql.NullInt64)
		case block.FieldID, block.FieldAuthorID, block.FieldSpeaker, block.FieldTexts, block.FieldPartID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Block fields.
func (b *Block) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case block.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				b.ID = value.String
			}
		case block.FieldAuthorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				b.AuthorID = value.String
			}
		case block.FieldSpeed:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field speed", values[i])
			} else if value.Valid {
				b.Speed = value.Float64
			}
		case block.FieldSpeaker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field speaker", values[i])
			} else if value.Valid {
				b.Speaker = value.String
			}
		case block.FieldVolume:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field volume", values[i])
			} else if value.Valid {
				b.Volume = value.Float64
			}
		case block.FieldPitch:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pitch", values[i])
			} else if value.Valid {
				b.Pitch = int(value.Int64)
			}
		case block.FieldTexts:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field texts", values[i])
			} else if value.Valid {
				b.Texts = value.String
			}
		case block.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				b.Duration = int(value.Int64)
			}
		case block.FieldPartID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field part_id", values[i])
			} else if value.Valid {
				b.PartID = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Block.
// This includes values selected through modifiers, order, etc.
func (b *Block) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryPart queries the "part" edge of the Block entity.
func (b *Block) QueryPart() *PartQuery {
	return NewBlockClient(b.config).QueryPart(b)
}

// Update returns a builder for updating this Block.
// Note that you need to call Block.Unwrap() before calling this method if this Block
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Block) Update() *BlockUpdateOne {
	return NewBlockClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Block entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Block) Unwrap() *Block {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Block is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Block) String() string {
	var builder strings.Builder
	builder.WriteString("Block(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("author_id=")
	builder.WriteString(b.AuthorID)
	builder.WriteString(", ")
	builder.WriteString("speed=")
	builder.WriteString(fmt.Sprintf("%v", b.Speed))
	builder.WriteString(", ")
	builder.WriteString("speaker=")
	builder.WriteString(b.Speaker)
	builder.WriteString(", ")
	builder.WriteString("volume=")
	builder.WriteString(fmt.Sprintf("%v", b.Volume))
	builder.WriteString(", ")
	builder.WriteString("pitch=")
	builder.WriteString(fmt.Sprintf("%v", b.Pitch))
	builder.WriteString(", ")
	builder.WriteString("texts=")
	builder.WriteString(b.Texts)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", b.Duration))
	builder.WriteString(", ")
	builder.WriteString("part_id=")
	builder.WriteString(b.PartID)
	builder.WriteByte(')')
	return builder.String()
}

// Blocks is a parsable slice of Block.
type Blocks []*Block
