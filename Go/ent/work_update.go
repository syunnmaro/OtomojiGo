// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"graphql-test-api/ent/part"
	"graphql-test-api/ent/predicate"
	"graphql-test-api/ent/user"
	"graphql-test-api/ent/work"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkUpdate is the builder for updating Work entities.
type WorkUpdate struct {
	config
	hooks    []Hook
	mutation *WorkMutation
}

// Where appends a list predicates to the WorkUpdate builder.
func (wu *WorkUpdate) Where(ps ...predicate.Work) *WorkUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetName sets the "name" field.
func (wu *WorkUpdate) SetName(s string) *WorkUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wu *WorkUpdate) SetNillableName(s *string) *WorkUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// SetCreatedAt sets the "created_at" field.
func (wu *WorkUpdate) SetCreatedAt(t time.Time) *WorkUpdate {
	wu.mutation.SetCreatedAt(t)
	return wu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wu *WorkUpdate) SetNillableCreatedAt(t *time.Time) *WorkUpdate {
	if t != nil {
		wu.SetCreatedAt(*t)
	}
	return wu
}

// SetAuthorID sets the "author_id" field.
func (wu *WorkUpdate) SetAuthorID(s string) *WorkUpdate {
	wu.mutation.SetAuthorID(s)
	return wu
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (wu *WorkUpdate) SetNillableAuthorID(s *string) *WorkUpdate {
	if s != nil {
		wu.SetAuthorID(*s)
	}
	return wu
}

// SetAuthor sets the "author" edge to the User entity.
func (wu *WorkUpdate) SetAuthor(u *User) *WorkUpdate {
	return wu.SetAuthorID(u.ID)
}

// AddPartIDs adds the "parts" edge to the Part entity by IDs.
func (wu *WorkUpdate) AddPartIDs(ids ...string) *WorkUpdate {
	wu.mutation.AddPartIDs(ids...)
	return wu
}

// AddParts adds the "parts" edges to the Part entity.
func (wu *WorkUpdate) AddParts(p ...*Part) *WorkUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wu.AddPartIDs(ids...)
}

// Mutation returns the WorkMutation object of the builder.
func (wu *WorkUpdate) Mutation() *WorkMutation {
	return wu.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (wu *WorkUpdate) ClearAuthor() *WorkUpdate {
	wu.mutation.ClearAuthor()
	return wu
}

// ClearParts clears all "parts" edges to the Part entity.
func (wu *WorkUpdate) ClearParts() *WorkUpdate {
	wu.mutation.ClearParts()
	return wu
}

// RemovePartIDs removes the "parts" edge to Part entities by IDs.
func (wu *WorkUpdate) RemovePartIDs(ids ...string) *WorkUpdate {
	wu.mutation.RemovePartIDs(ids...)
	return wu
}

// RemoveParts removes "parts" edges to Part entities.
func (wu *WorkUpdate) RemoveParts(p ...*Part) *WorkUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wu.RemovePartIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkUpdate) check() error {
	if _, ok := wu.mutation.AuthorID(); wu.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Work.author"`)
	}
	return nil
}

func (wu *WorkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(work.Table, work.Columns, sqlgraph.NewFieldSpec(work.FieldID, field.TypeString))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(work.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.CreatedAt(); ok {
		_spec.SetField(work.FieldCreatedAt, field.TypeTime, value)
	}
	if wu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.AuthorTable,
			Columns: []string{work.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.AuthorTable,
			Columns: []string{work.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.PartsTable,
			Columns: []string{work.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedPartsIDs(); len(nodes) > 0 && !wu.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.PartsTable,
			Columns: []string{work.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.PartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.PartsTable,
			Columns: []string{work.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{work.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkUpdateOne is the builder for updating a single Work entity.
type WorkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkMutation
}

// SetName sets the "name" field.
func (wuo *WorkUpdateOne) SetName(s string) *WorkUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wuo *WorkUpdateOne) SetNillableName(s *string) *WorkUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// SetCreatedAt sets the "created_at" field.
func (wuo *WorkUpdateOne) SetCreatedAt(t time.Time) *WorkUpdateOne {
	wuo.mutation.SetCreatedAt(t)
	return wuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wuo *WorkUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkUpdateOne {
	if t != nil {
		wuo.SetCreatedAt(*t)
	}
	return wuo
}

// SetAuthorID sets the "author_id" field.
func (wuo *WorkUpdateOne) SetAuthorID(s string) *WorkUpdateOne {
	wuo.mutation.SetAuthorID(s)
	return wuo
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (wuo *WorkUpdateOne) SetNillableAuthorID(s *string) *WorkUpdateOne {
	if s != nil {
		wuo.SetAuthorID(*s)
	}
	return wuo
}

// SetAuthor sets the "author" edge to the User entity.
func (wuo *WorkUpdateOne) SetAuthor(u *User) *WorkUpdateOne {
	return wuo.SetAuthorID(u.ID)
}

// AddPartIDs adds the "parts" edge to the Part entity by IDs.
func (wuo *WorkUpdateOne) AddPartIDs(ids ...string) *WorkUpdateOne {
	wuo.mutation.AddPartIDs(ids...)
	return wuo
}

// AddParts adds the "parts" edges to the Part entity.
func (wuo *WorkUpdateOne) AddParts(p ...*Part) *WorkUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wuo.AddPartIDs(ids...)
}

// Mutation returns the WorkMutation object of the builder.
func (wuo *WorkUpdateOne) Mutation() *WorkMutation {
	return wuo.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (wuo *WorkUpdateOne) ClearAuthor() *WorkUpdateOne {
	wuo.mutation.ClearAuthor()
	return wuo
}

// ClearParts clears all "parts" edges to the Part entity.
func (wuo *WorkUpdateOne) ClearParts() *WorkUpdateOne {
	wuo.mutation.ClearParts()
	return wuo
}

// RemovePartIDs removes the "parts" edge to Part entities by IDs.
func (wuo *WorkUpdateOne) RemovePartIDs(ids ...string) *WorkUpdateOne {
	wuo.mutation.RemovePartIDs(ids...)
	return wuo
}

// RemoveParts removes "parts" edges to Part entities.
func (wuo *WorkUpdateOne) RemoveParts(p ...*Part) *WorkUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wuo.RemovePartIDs(ids...)
}

// Where appends a list predicates to the WorkUpdate builder.
func (wuo *WorkUpdateOne) Where(ps ...predicate.Work) *WorkUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkUpdateOne) Select(field string, fields ...string) *WorkUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Work entity.
func (wuo *WorkUpdateOne) Save(ctx context.Context) (*Work, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkUpdateOne) SaveX(ctx context.Context) *Work {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkUpdateOne) check() error {
	if _, ok := wuo.mutation.AuthorID(); wuo.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Work.author"`)
	}
	return nil
}

func (wuo *WorkUpdateOne) sqlSave(ctx context.Context) (_node *Work, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(work.Table, work.Columns, sqlgraph.NewFieldSpec(work.FieldID, field.TypeString))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Work.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, work.FieldID)
		for _, f := range fields {
			if !work.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != work.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(work.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.CreatedAt(); ok {
		_spec.SetField(work.FieldCreatedAt, field.TypeTime, value)
	}
	if wuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.AuthorTable,
			Columns: []string{work.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.AuthorTable,
			Columns: []string{work.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.PartsTable,
			Columns: []string{work.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedPartsIDs(); len(nodes) > 0 && !wuo.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.PartsTable,
			Columns: []string{work.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.PartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.PartsTable,
			Columns: []string{work.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Work{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{work.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
