// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"graphql-test-api/ent/user"
	"graphql-test-api/ent/work"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Work is the model entity for the Work schema.
type Work struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// AuthorID holds the value of the "author_id" field.
	AuthorID string `json:"author_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkQuery when eager-loading is set.
	Edges        WorkEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkEdges holds the relations/edges for other nodes in the graph.
type WorkEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Parts holds the value of the parts edge.
	Parts []*Part `json:"parts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedParts map[string][]*Part
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PartsOrErr returns the Parts value or an error if the edge
// was not loaded in eager-loading.
func (e WorkEdges) PartsOrErr() ([]*Part, error) {
	if e.loadedTypes[1] {
		return e.Parts, nil
	}
	return nil, &NotLoadedError{edge: "parts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Work) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case work.FieldID, work.FieldName, work.FieldCreatedAt, work.FieldAuthorID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Work fields.
func (w *Work) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case work.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				w.ID = value.String
			}
		case work.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case work.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.String
			}
		case work.FieldAuthorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				w.AuthorID = value.String
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Work.
// This includes values selected through modifiers, order, etc.
func (w *Work) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Work entity.
func (w *Work) QueryUser() *UserQuery {
	return NewWorkClient(w.config).QueryUser(w)
}

// QueryParts queries the "parts" edge of the Work entity.
func (w *Work) QueryParts() *PartQuery {
	return NewWorkClient(w.config).QueryParts(w)
}

// Update returns a builder for updating this Work.
// Note that you need to call Work.Unwrap() before calling this method if this Work
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Work) Update() *WorkUpdateOne {
	return NewWorkClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Work entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Work) Unwrap() *Work {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Work is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Work) String() string {
	var builder strings.Builder
	builder.WriteString("Work(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("author_id=")
	builder.WriteString(w.AuthorID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedParts returns the Parts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Work) NamedParts(name string) ([]*Part, error) {
	if w.Edges.namedParts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedParts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Work) appendNamedParts(name string, edges ...*Part) {
	if w.Edges.namedParts == nil {
		w.Edges.namedParts = make(map[string][]*Part)
	}
	if len(edges) == 0 {
		w.Edges.namedParts[name] = []*Part{}
	} else {
		w.Edges.namedParts[name] = append(w.Edges.namedParts[name], edges...)
	}
}

// Works is a parsable slice of Work.
type Works []*Work
