// Code generated by ent, DO NOT EDIT.

package user

import (
	"graphql-test-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// StripeID applies equality check predicate on the "stripe_id" field. It's identical to StripeIDEQ.
func StripeID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStripeID, v))
}

// Point applies equality check predicate on the "point" field. It's identical to PointEQ.
func Point(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPoint, v))
}

// StripeIDEQ applies the EQ predicate on the "stripe_id" field.
func StripeIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStripeID, v))
}

// StripeIDNEQ applies the NEQ predicate on the "stripe_id" field.
func StripeIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldStripeID, v))
}

// StripeIDIn applies the In predicate on the "stripe_id" field.
func StripeIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldStripeID, vs...))
}

// StripeIDNotIn applies the NotIn predicate on the "stripe_id" field.
func StripeIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldStripeID, vs...))
}

// StripeIDGT applies the GT predicate on the "stripe_id" field.
func StripeIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldStripeID, v))
}

// StripeIDGTE applies the GTE predicate on the "stripe_id" field.
func StripeIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldStripeID, v))
}

// StripeIDLT applies the LT predicate on the "stripe_id" field.
func StripeIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldStripeID, v))
}

// StripeIDLTE applies the LTE predicate on the "stripe_id" field.
func StripeIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldStripeID, v))
}

// StripeIDContains applies the Contains predicate on the "stripe_id" field.
func StripeIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldStripeID, v))
}

// StripeIDHasPrefix applies the HasPrefix predicate on the "stripe_id" field.
func StripeIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldStripeID, v))
}

// StripeIDHasSuffix applies the HasSuffix predicate on the "stripe_id" field.
func StripeIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldStripeID, v))
}

// StripeIDEqualFold applies the EqualFold predicate on the "stripe_id" field.
func StripeIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldStripeID, v))
}

// StripeIDContainsFold applies the ContainsFold predicate on the "stripe_id" field.
func StripeIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldStripeID, v))
}

// PointEQ applies the EQ predicate on the "point" field.
func PointEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPoint, v))
}

// PointNEQ applies the NEQ predicate on the "point" field.
func PointNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPoint, v))
}

// PointIn applies the In predicate on the "point" field.
func PointIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldPoint, vs...))
}

// PointNotIn applies the NotIn predicate on the "point" field.
func PointNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPoint, vs...))
}

// PointGT applies the GT predicate on the "point" field.
func PointGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldPoint, v))
}

// PointGTE applies the GTE predicate on the "point" field.
func PointGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPoint, v))
}

// PointLT applies the LT predicate on the "point" field.
func PointLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldPoint, v))
}

// PointLTE applies the LTE predicate on the "point" field.
func PointLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPoint, v))
}

// HasWorks applies the HasEdge predicate on the "works" edge.
func HasWorks() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorksTable, WorksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorksWith applies the HasEdge predicate on the "works" edge with a given conditions (other predicates).
func HasWorksWith(preds ...predicate.Work) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newWorksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
