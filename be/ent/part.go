// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"graphql-test-api/ent/part"
	"graphql-test-api/ent/work"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Part is the model entity for the Part schema.
type Part struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// WorkID holds the value of the "work_id" field.
	WorkID string `json:"work_id,omitempty"`
	// AuthorID holds the value of the "author_id" field.
	AuthorID string `json:"author_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartQuery when eager-loading is set.
	Edges        PartEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PartEdges holds the relations/edges for other nodes in the graph.
type PartEdges struct {
	// Work holds the value of the work edge.
	Work *Work `json:"work,omitempty"`
	// Blocks holds the value of the blocks edge.
	Blocks []*Block `json:"blocks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedBlocks map[string][]*Block
}

// WorkOrErr returns the Work value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartEdges) WorkOrErr() (*Work, error) {
	if e.loadedTypes[0] {
		if e.Work == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: work.Label}
		}
		return e.Work, nil
	}
	return nil, &NotLoadedError{edge: "work"}
}

// BlocksOrErr returns the Blocks value or an error if the edge
// was not loaded in eager-loading.
func (e PartEdges) BlocksOrErr() ([]*Block, error) {
	if e.loadedTypes[1] {
		return e.Blocks, nil
	}
	return nil, &NotLoadedError{edge: "blocks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Part) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case part.FieldID, part.FieldName, part.FieldWorkID, part.FieldAuthorID:
			values[i] = new(sql.NullString)
		case part.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Part fields.
func (pa *Part) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case part.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pa.ID = value.String
			}
		case part.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case part.FieldWorkID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field work_id", values[i])
			} else if value.Valid {
				pa.WorkID = value.String
			}
		case part.FieldAuthorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				pa.AuthorID = value.String
			}
		case part.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Part.
// This includes values selected through modifiers, order, etc.
func (pa *Part) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryWork queries the "work" edge of the Part entity.
func (pa *Part) QueryWork() *WorkQuery {
	return NewPartClient(pa.config).QueryWork(pa)
}

// QueryBlocks queries the "blocks" edge of the Part entity.
func (pa *Part) QueryBlocks() *BlockQuery {
	return NewPartClient(pa.config).QueryBlocks(pa)
}

// Update returns a builder for updating this Part.
// Note that you need to call Part.Unwrap() before calling this method if this Part
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Part) Update() *PartUpdateOne {
	return NewPartClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Part entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Part) Unwrap() *Part {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Part is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Part) String() string {
	var builder strings.Builder
	builder.WriteString("Part(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", ")
	builder.WriteString("work_id=")
	builder.WriteString(pa.WorkID)
	builder.WriteString(", ")
	builder.WriteString("author_id=")
	builder.WriteString(pa.AuthorID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedBlocks returns the Blocks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Part) NamedBlocks(name string) ([]*Block, error) {
	if pa.Edges.namedBlocks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedBlocks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Part) appendNamedBlocks(name string, edges ...*Block) {
	if pa.Edges.namedBlocks == nil {
		pa.Edges.namedBlocks = make(map[string][]*Block)
	}
	if len(edges) == 0 {
		pa.Edges.namedBlocks[name] = []*Block{}
	} else {
		pa.Edges.namedBlocks[name] = append(pa.Edges.namedBlocks[name], edges...)
	}
}

// Parts is a parsable slice of Part.
type Parts []*Part
